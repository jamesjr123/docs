<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:p="http://primefaces.org/ui">

<h:head>
	<f:facet name="first">
		<meta http-equiv="X-UA-Compatible" content="IE=Edge" />
		  <meta name="google-signin-client_id" content="89219856669-v7hcnh0p14go8aa61mlss508u751vmss.apps.googleusercontent.com"/>
		  <meta name="google-signin-cookiepolicy" content="single_host_origin"/>
		  <meta name="google-signin-scope" content="profile email"/>	
  <!-- Google Sign In -->
  
  <script src="https://apis.google.com/js/platform.js" defer="defer"></script>

  <!-- Firebase -->
<script src="https://www.gstatic.com/firebasejs/3.4.0/firebase.js"></script>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyCOgxfrDQsTzlr3Whztvm2SWPED8tobML4",
    authDomain: "vast-ascent-143407.firebaseapp.com",
    databaseURL: "https://vast-ascent-143407.firebaseio.com",
    storageBucket: "vast-ascent-143407.appspot.com",
    messagingSenderId: "89219856669"
  };
  firebase.initializeApp(config);
</script>

  <script type="text/javascript">

    // [START googlecallback]
    function onSignIn(googleUser) {
      console.log('Google Auth Response', googleUser);
      // We need to register an Observer on Firebase Auth to make sure auth is initialized.
      var unsubscribe = firebase.auth().onAuthStateChanged(function(firebaseUser) {
        unsubscribe();
        // Check if we are already signed-in Firebase with the correct user.
        if (!isUserEqual(googleUser, firebaseUser)) {
          // Build Firebase credential with the Google ID token.
          // [START googlecredential]
          var credential = firebase.auth.GoogleAuthProvider.credential(
              googleUser.getAuthResponse().id_token);
          // [END googlecredential]
          // Sign in with credential from the Google user.
          // [START authwithcred]
          firebase.auth().signInWithCredential(credential).catch(function(error) {
            // Handle Errors here.
            var errorCode = error.code;
            var errorMessage = error.message;
            // The email of the user's account used.
            var email = error.email;
            // The firebase.auth.AuthCredential type that was used.
            var credential = error.credential;
            // [START_EXCLUDE]
            if (errorCode === 'auth/account-exists-with-different-credential') {
              alert('You have already signed up with a different auth provider for that email.');
              // If you are using multiple auth providers on your app you should handle linking
              // the user's accounts here.
            } else {
              console.error(error);
            }
            // [END_EXCLUDE]
          });
          // [END authwithcred]
        } else {
          console.log('User already signed-in Firebase.');
        }
      });
    }
    // [END googlecallback]

    /**
     * Check that the given Google user is equals to the given Firebase user.
     */
    // [START checksameuser]
    function isUserEqual(googleUser, firebaseUser) {
      if (firebaseUser) {
        var providerData = firebaseUser.providerData;
        for ( i = 0; i &lt; providerData.length; i++) {
          if (providerData[i].providerId === firebase.auth.GoogleAuthProvider.PROVIDER_ID &amp;&amp;
              providerData[i].uid === googleUser.getBasicProfile().getId()) {
            // We don't need to reauth the Firebase connection.
            return true;
          }
        }
      }
      return false;
    }

    /**
     * Handle the sign out button press.
     */
    function handleSignOut() {
      var googleAuth = gapi.auth2.getAuthInstance();
      googleAuth.signOut().then(function() {
        firebase.auth().signOut();
      });
    }


    /**
     * initApp handles setting up UI event listeners and registering Firebase auth listeners:
     *  - firebase.auth().onAuthStateChanged: This listener is called when the user is signed in or
     *    out, and that is where we update the UI.
     */
    function initApp() {
      // Auth state changes.
      // [START authstatelistener]
      firebase.auth().onAuthStateChanged(function(user){
        if (user) {
          // User is signed in.
          var displayName = user.displayName;
          var email = user.email;
          var emailVerified = user.emailVerified;
          var photoURL = user.photoURL;
          var isAnonymous = user.isAnonymous;
          var uid = user.uid;
          var providerData = user.providerData;
          // [START_EXCLUDE]
          document.getElementById('quickstart-sign-in-status').textContent = 'Signed in';
          document.getElementById('signout').disabled = false;
          document.getElementById('quickstart-account-details').textContent = JSON.stringify(user, null, '  ');
          // [END_EXCLUDE]
        } else {
          // User is signed out.
          // [START_EXCLUDE]
          document.getElementById('quickstart-sign-in-status').textContent = 'Signed out';
          document.getElementById('signout').disabled = true;
          document.getElementById('quickstart-account-details').textContent = 'null';
            // [END_EXCLUDE]
        }
      });
      // [END authstatelistener]

      document.getElementById('signout').addEventListener('click', handleSignOut, false);
    }

    window.onload = function() {
      initApp();
    };
  </script>		
<div class="demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header">
  <!-- Header section containing title -->
  <header class="mdl-layout__header mdl-color-text--white mdl-color--light-blue-700">
    <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">
      <div class="mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--8-col-desktop">
        <a href="/"><h3>Firebase Authentication</h3></a>
      </div>
    </div>
  </header>



  <main class="mdl-layout__content mdl-color--grey-100">
    <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">

      <!-- Container for the demo -->
      <div class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop">
        <div class="mdl-card__title mdl-color--light-blue-600 mdl-color-text--white">
          <h2 class="mdl-card__title-text">Google Authentication with OAuth Credentials</h2>
        </div>
        <div class="mdl-card__supporting-text mdl-color-text--grey-600">
          <p>Sign in with your Google account below.</p>
          <!-- [START google_button] -->
          <div class="g-signin2" data-onsuccess="onSignIn" data-theme="dark"></div>
          <!-- [END google_button] -->
          <br/>
          <button disabled="disabled" class="mdl-button mdl-js-button mdl-button--raised" id="signout" name="signout">Sign Out</button>

          <div class="quickstart-user-details-container">
            Firebase sign-in status: <span id="quickstart-sign-in-status">Unknown</span>
            <div>Firebase auth <code>currentUser</code> object value:</div>
            <pre><code id="quickstart-account-details">null</code></pre>
          </div>
        </div>
      </div>

    </div>
  </main>
</div>    	
	</f:facet>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title><ui:insert name="pagetitle">eCPC </ui:insert></title>

	<h:outputStylesheet link="/stylesets/default/stylesheet/style.css" />
	<h:outputStylesheet library='css' name="template.css" />

<ui:insert name="stuff"></ui:insert>

</h:head>

<h:body>
	<p:layout style="height: 1000px;">
	<p:layoutUnit position="north">
	
	<p:panelGrid style="width: 100%">
    <f:facet name="header">

        <p:row>
            <p:column  colspan="7"><h:outputText  style="float:Left" 
						value="Welcome  " /></p:column>
            <p:column><h:outputText class="floatRight"
						value="#{facesSession.timestamp}" >
						<f:convertDateTime pattern="dd-MMM-yyyy HH:mm" type="date"
												timeZone="#{referenceData.timeZone}" />
			</h:outputText></p:column>
        </p:row>
 
    </f:facet>
    </p:panelGrid>
	</p:layoutUnit>
	<p:layoutUnit position="center">
		<ui:insert name="content">Body</ui:insert>
	</p:layoutUnit>
	<p:layoutUnit position="south">

		<h:outputText class="floatRight" value="#{facesSession.systemNodeText()}"  />
	</p:layoutUnit>
	</p:layout>
</h:body>
</html>
